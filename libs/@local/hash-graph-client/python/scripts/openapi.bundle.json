{
  "openapi": "3.0.3",
  "info": {
    "title": "graph",
    "description": "HASH Graph API",
    "license": {
      "name": ""
    },
    "version": "0.0.0"
  },
  "paths": {
    "/accounts": {
      "post": {
        "tags": ["Graph", "Account"],
        "operationId": "create_account_id",
        "responses": {
          "200": {
            "description": "The schema of the created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountId"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types": {
      "post": {
        "tags": ["Graph", "DataType"],
        "operationId": "create_data_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfOntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create data type in the store as the base data type URL already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": ["Graph", "DataType"],
        "operationId": "update_data_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base data type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/archive": {
      "put": {
        "tags": ["Graph", "DataType"],
        "operationId": "archive_data_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Data type ID was not found"
          },
          "409": {
            "description": "Data type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/load": {
      "post": {
        "tags": ["Graph", "DataType"],
        "operationId": "load_external_data_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the loaded data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load data type in the store as the base data type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/query": {
      "post": {
        "tags": ["Graph", "DataType"],
        "operationId": "get_data_types_by_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a subgraph rooted at all data types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/unarchive": {
      "put": {
        "tags": ["Graph", "DataType"],
        "operationId": "unarchive_data_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchiveDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Data type ID was not found"
          },
          "409": {
            "description": "Data type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities": {
      "post": {
        "tags": ["Graph", "Entity"],
        "operationId": "create_entity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": ["Graph", "Entity"],
        "operationId": "update_entity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity ID or Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "423": {
            "description": "The entity that should be updated was unexpectedly updated at the same time"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/query": {
      "post": {
        "tags": ["Graph", "Entity"],
        "operationId": "get_entities_by_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at entities that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types": {
      "post": {
        "tags": ["Graph", "EntityType"],
        "operationId": "create_entity_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfEntityTypeMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Provided request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Status",
                  "type": "object",
                  "properties": {
                    "code": {
                      "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema/definitions/StatusCode",
                      "title": "code"
                    },
                    "message": {
                      "description": "A developer-facing description of the status.\n\nWhere possible, this should provide guiding advice for debugging and/or handling the error.",
                      "type": "string"
                    },
                    "contents": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema/definitions/ErrorInfo"
                          },
                          {
                            "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema/definitions/RequestInfo"
                          },
                          {
                            "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema/definitions/ResourceInfo"
                          }
                        ]
                      }
                    }
                  },
                  "required": ["code", "contents"],
                  "definitions": {
                    "StatusCode": {
                      "description": "The canonical status codes for software within the HASH ecosystem.\nSometimes multiple status codes may apply. Services should return the most specific status code\nthat applies. For example, prefer `OutOfRange` over `FailedPrecondition` if both codes\napply. Similarly prefer `NotFound` or `AlreadyExists` over `FailedPrecondition`.",
                      "title": "StatusCode",
                      "enum": [
                        "ABORTED",
                        "ALREADY_EXISTS",
                        "CANCELLED",
                        "DATA_LOSS",
                        "DEADLINE_EXCEEDED",
                        "FAILED_PRECONDITION",
                        "INTERNAL",
                        "INVALID_ARGUMENT",
                        "NOT_FOUND",
                        "OK",
                        "OUT_OF_RANGE",
                        "PERMISSION_DENIED",
                        "RESOURCE_EXHAUSTED",
                        "UNAUTHENTICATED",
                        "UNAVAILABLE",
                        "UNIMPLEMENTED",
                        "UNKNOWN"
                      ],
                      "type": "string"
                    },
                    "ErrorInfo": {
                      "type": "object",
                      "properties": {
                        "reason": {
                          "description": "The reason of the error. This is a constant value that identifies the proximate cause of\nthe error. Error reasons are unique within a particular domain of errors. This should be at\nmost 63 characters and match a regular expression of `[A-Z][A-Z0-9_]+[A-Z0-9]`, which\nrepresents UPPER_SNAKE_CASE.",
                          "type": "string",
                          "title": "reason"
                        },
                        "domain": {
                          "description": "The logical grouping to which the \"reason\" belongs.\nThe error domain is typically the registered service name of the tool or product that\ngenerates the error.",
                          "type": "string",
                          "title": "domain"
                        },
                        "metadata": {
                          "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema/definitions/Record%3Cstring%2Cany%3E",
                          "description": "Additional structured details about this error.\n\nKeys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When\nidentifying the current value of an exceeded limit, the units should be contained in the\nkey, not the value.  For example, rather than {\"instanceLimit\": \"100/request\"}, should be\nreturned as, {\"instanceLimitPerRequest\": \"100\"}, if the client exceeds the number of\ninstances that can be created in a single (batch) request.",
                          "title": "metadata"
                        }
                      },
                      "required": ["domain", "metadata", "reason"]
                    },
                    "RequestInfo": {
                      "type": "object",
                      "properties": {
                        "requestId": {
                          "description": "An opaque string that should only be interpreted by the service generating it. For example, it\ncan be used to identify requests in the service's logs.",
                          "type": "string",
                          "title": "requestId"
                        },
                        "servingData": {
                          "description": "Any data that was used to serve this request. For example, an encrypted stack trace that can be\nsent back to the service provider for debugging.",
                          "type": "string",
                          "title": "servingData"
                        }
                      },
                      "required": ["requestId", "servingData"]
                    },
                    "ResourceInfo": {
                      "type": "object",
                      "properties": {
                        "resourceType": {
                          "description": "A name for the type of resource being accessed.\n\nFor example \"SQL table\", \"Entity\", \"Property Type\", \"Redis\"; or the type URL of the resource:\ne.g. \"https://blockprotocol.org/type-system/0.3/schema/meta/entity-type\".",
                          "type": "string",
                          "title": "resourceType"
                        },
                        "resourceName": {
                          "description": "The name of the resource being accessed.\n\nFor example, an ontology type ID: `https://hash.ai/@alice/types/entity-type/Person/`, if the current\nerror is [@local/status/StatusCode.PermissionDenied].",
                          "type": "string",
                          "title": "resourceName"
                        },
                        "owner": {
                          "description": "The owner of the resource (optional).\n\nFor example, a User's entity ID: `2cfa262a-f49a-4a61-a9c5-80a0c5959994%45e528cb-801d-49d1-8f71-d9e2af38a5e7`;",
                          "type": "string",
                          "title": "owner"
                        },
                        "description": {
                          "description": "Describes what error is encountered when accessing this resource.\n\nFor example, updating a property on a user's entity may require write permission on that property.",
                          "type": "string",
                          "title": "description"
                        }
                      },
                      "required": [
                        "description",
                        "resourceName",
                        "resourceType"
                      ]
                    },
                    "Record<string,any>": {
                      "description": "Construct a type with a set of properties K of type T",
                      "title": "Record<string,any>",
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Unable to create entity type in the datastore as the base entity type ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Graph", "EntityType"],
        "operationId": "update_entity_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base entity type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/archive": {
      "put": {
        "tags": ["Graph", "EntityType"],
        "operationId": "archive_entity_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity type ID was not found"
          },
          "409": {
            "description": "Entity type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/load": {
      "post": {
        "tags": ["Graph", "EntityType"],
        "operationId": "load_external_entity_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Provided request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load entity type in the datastore as the entity type ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1entity-types/post/responses/400/content/application~1json/schema"
                }
              }
            }
          }
        }
      }
    },
    "/entity-types/query": {
      "post": {
        "tags": ["Graph", "EntityType"],
        "operationId": "get_entity_types_by_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityTypeStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at entity types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/unarchive": {
      "put": {
        "tags": ["Graph", "DataType"],
        "operationId": "unarchive_entity_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchiveEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity type ID was not found"
          },
          "409": {
            "description": "Entity type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types": {
      "post": {
        "tags": ["Graph", "PropertyType"],
        "operationId": "create_property_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfOntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create property type in the store as the base property type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": ["Graph", "PropertyType"],
        "operationId": "update_property_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base property type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/archive": {
      "put": {
        "tags": ["Graph", "PropertyType"],
        "operationId": "archive_property_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Property type ID was not found"
          },
          "409": {
            "description": "Property type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/load": {
      "post": {
        "tags": ["Graph", "PropertyType"],
        "operationId": "load_external_property_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalPropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the loaded property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load property type in the store as the base property type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/query": {
      "post": {
        "tags": ["Graph", "PropertyType"],
        "operationId": "get_property_types_by_query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyTypeStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at property types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/unarchive": {
      "put": {
        "tags": ["Graph", "DataType"],
        "operationId": "unarchive_property_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchivePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Property type ID was not found"
          },
          "409": {
            "description": "Property type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountId": {
        "type": "string",
        "format": "uuid"
      },
      "ArchiveDataTypeRequest": {
        "type": "object",
        "required": ["typeToArchive", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordArchivedById"
          },
          "typeToArchive": {
            "type": "string"
          }
        }
      },
      "ArchiveEntityTypeRequest": {
        "type": "object",
        "required": ["typeToArchive", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordArchivedById"
          },
          "typeToArchive": {
            "type": "string"
          }
        }
      },
      "ArchivePropertyTypeRequest": {
        "type": "object",
        "required": ["typeToArchive", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordArchivedById"
          },
          "typeToArchive": {
            "type": "string"
          }
        }
      },
      "BaseUrl": {
        "type": "string"
      },
      "ClosedTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": ["kind", "limit"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["inclusive"]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "CreateDataTypeRequest": {
        "type": "object",
        "required": ["schema", "ownedById", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataTypeWithMetadata/properties/schema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataTypeWithMetadata/properties/schema"
                }
              }
            ]
          }
        }
      },
      "CreateEntityRequest": {
        "type": "object",
        "required": ["properties", "entityTypeId", "ownedById", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "entityTypeId": {
            "type": "string"
          },
          "entityUuid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityUuid"
              }
            ]
          },
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "properties": {
            "$ref": "#/components/schemas/EntityProperties"
          }
        }
      },
      "CreateEntityTypeRequest": {
        "type": "object",
        "required": ["schema", "ownedById", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "labelProperty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUrl"
              }
            ],
            "nullable": true
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema"
                }
              }
            ]
          }
        }
      },
      "CreatePropertyTypeRequest": {
        "type": "object",
        "required": ["schema", "ownedById", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema"
                }
              }
            ]
          }
        }
      },
      "CustomEntityTypeMetadata": {
        "oneOf": [
          {
            "type": "object",
            "required": ["provenance", "temporalVersioning", "ownedById"],
            "properties": {
              "labelProperty": {
                "$ref": "#/components/schemas/BaseUrl"
              },
              "ownedById": {
                "$ref": "#/components/schemas/OwnedById"
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvenanceMetadata"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          },
          {
            "type": "object",
            "required": ["provenance", "temporalVersioning", "fetchedAt"],
            "properties": {
              "fetchedAt": {
                "type": "string"
              },
              "labelProperty": {
                "$ref": "#/components/schemas/BaseUrl"
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvenanceMetadata"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          }
        ]
      },
      "CustomOntologyMetadata": {
        "oneOf": [
          {
            "type": "object",
            "title": "CustomOwnedOntologyElementMetadata",
            "required": ["provenance", "temporalVersioning", "ownedById"],
            "properties": {
              "ownedById": {
                "$ref": "#/components/schemas/OwnedById"
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvenanceMetadata"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          },
          {
            "type": "object",
            "title": "CustomExternalOntologyElementMetadata",
            "required": ["provenance", "temporalVersioning", "fetchedAt"],
            "properties": {
              "fetchedAt": {
                "type": "string"
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvenanceMetadata"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          }
        ]
      },
      "DataTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`DataTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "recordCreatedById",
          "recordArchivedById",
          "title",
          "description",
          "type"
        ]
      },
      "DataTypeStructuralQuery": {
        "type": "object",
        "required": ["filter", "graphResolveDepths", "temporalAxes"],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "DataTypeVertexId": {
        "type": "object",
        "required": ["baseId", "revisionId"],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "DataTypeWithMetadata": {
        "type": "object",
        "required": ["schema", "metadata"],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/OntologyElementMetadata"
          },
          "schema": {
            "title": "Data Type",
            "description": "Specifies the structure of a Data Type",
            "type": "object",
            "properties": {
              "$schema": {
                "type": "string",
                "enum": [
                  "https://blockprotocol.org/types/modules/graph/0.3/schema/data-type"
                ]
              },
              "kind": {
                "type": "string",
                "enum": ["dataType"]
              },
              "$id": {
                "$ref": "#/components/schemas/DataTypeWithMetadata/properties/schema/definitions/VersionedUrl"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": ["$schema", "kind", "$id", "title", "type"],
            "additionalProperties": true,
            "definitions": {
              "VersionedUrl": {
                "title": "Versioned URL",
                "description": "The versioned URL of a Block Protocol ontology type (the $id of the schema). It should be of the form `${baseUrl}v/${versionNumber}`",
                "type": "string",
                "format": "uri",
                "maxLength": 2048
              }
            }
          }
        }
      },
      "DecisionTime": {
        "type": "string",
        "description": "Time axis for the decision time.\n\nThis is used as the generic argument to time-related structs and can be used as tag value.",
        "enum": ["decisionTime"]
      },
      "EdgeResolveDepths": {
        "type": "object",
        "required": ["incoming", "outgoing"],
        "properties": {
          "incoming": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "outgoing": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "Edges": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OntologyOutwardEdge"
                },
                {
                  "$ref": "#/components/schemas/KnowledgeGraphOutwardEdge"
                }
              ]
            }
          }
        }
      },
      "Entity": {
        "type": "object",
        "description": "A record of an [`Entity`] that has been persisted in the datastore, with its associated\nmetadata.",
        "required": ["properties", "metadata"],
        "properties": {
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "properties": {
            "$ref": "#/components/schemas/EntityProperties"
          }
        }
      },
      "EntityEditionId": {
        "type": "string",
        "format": "uuid"
      },
      "EntityId": {
        "type": "string"
      },
      "EntityIdWithInterval": {
        "type": "object",
        "required": ["entityId", "interval"],
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "interval": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "EntityLinkOrder": {
        "type": "object",
        "properties": {
          "leftToRightOrder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkOrder"
              }
            ]
          },
          "rightToLeftOrder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkOrder"
              }
            ]
          }
        }
      },
      "EntityMetadata": {
        "type": "object",
        "description": "The metadata of an [`Entity`] record.",
        "required": [
          "recordId",
          "temporalVersioning",
          "entityTypeId",
          "provenance",
          "archived"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "entityTypeId": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvenanceMetadata"
          },
          "recordId": {
            "$ref": "#/components/schemas/EntityRecordId"
          },
          "temporalVersioning": {
            "$ref": "#/components/schemas/EntityTemporalMetadata"
          }
        }
      },
      "EntityProperties": {
        "type": "object"
      },
      "EntityQueryToken": {
        "type": "string",
        "description": "A single token in an [`EntityQueryPath`].",
        "enum": [
          "uuid",
          "editionId",
          "archived",
          "ownedById",
          "recordCreatedById",
          "type",
          "properties",
          "incomingLinks",
          "outgoingLinks",
          "leftEntity",
          "rightEntity",
          "leftToRightOrder",
          "rightToLeftOrder"
        ]
      },
      "EntityRecordId": {
        "type": "object",
        "required": ["entityId", "editionId"],
        "properties": {
          "editionId": {
            "$ref": "#/components/schemas/EntityEditionId"
          },
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "EntityStructuralQuery": {
        "type": "object",
        "required": ["filter", "graphResolveDepths", "temporalAxes"],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "EntityTemporalMetadata": {
        "type": "object",
        "required": ["decisionTime", "transactionTime"],
        "properties": {
          "decisionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          },
          "transactionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "EntityTypeMetadata": {
        "type": "object",
        "required": ["recordId", "custom"],
        "properties": {
          "custom": {
            "$ref": "#/components/schemas/CustomEntityTypeMetadata"
          },
          "recordId": {
            "$ref": "#/components/schemas/OntologyTypeRecordId"
          }
        }
      },
      "EntityTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`EntityTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "recordCreatedById",
          "recordArchivedById",
          "title",
          "description",
          "examples",
          "properties",
          "required",
          "labelProperty",
          "links",
          "inheritsFrom"
        ]
      },
      "EntityTypeStructuralQuery": {
        "type": "object",
        "required": ["filter", "graphResolveDepths", "temporalAxes"],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "EntityTypeVertexId": {
        "type": "object",
        "required": ["baseId", "revisionId"],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "EntityTypeWithMetadata": {
        "type": "object",
        "required": ["schema", "metadata"],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EntityTypeMetadata"
          },
          "schema": {
            "title": "Entity Type",
            "description": "Specifies the structure of a Block Protocol entity type",
            "type": "object",
            "properties": {
              "$schema": {
                "type": "string",
                "enum": [
                  "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-type"
                ]
              },
              "kind": {
                "type": "string",
                "enum": ["entityType"]
              },
              "$id": {
                "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/VersionedUrl"
              },
              "type": {
                "type": "string",
                "enum": ["object"]
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "allOf": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/EntityTypeReference"
                }
              },
              "examples": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "properties": {
                "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/PropertyTypeObject"
              },
              "required": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/BaseUrl"
                }
              },
              "links": {
                "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/LinkTypeObject"
              }
            },
            "additionalProperties": false,
            "required": [
              "$schema",
              "kind",
              "type",
              "$id",
              "title",
              "properties"
            ],
            "definitions": {
              "VersionedUrl": {
                "title": "Versioned URL",
                "description": "The versioned URL of a Block Protocol ontology type (the $id of the schema). It should be of the form `${baseUrl}v/${versionNumber}`",
                "type": "string",
                "format": "uri",
                "maxLength": 2048
              },
              "BaseUrl": {
                "title": "Base URL",
                "description": "The base URL of a Block Protocol ontology type (the $id of the schema, without the versioned suffix). It should a valid URL, with a trailing slash.",
                "type": "string",
                "format": "uri",
                "maxLength": 2048
              },
              "EntityTypeReference": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/VersionedUrl"
                  }
                },
                "required": ["$ref"],
                "additionalProperties": false
              },
              "PropertyObjectReference": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/BaseUrl"
                  }
                },
                "required": ["$ref"],
                "additionalProperties": false
              },
              "PropertyTypeObject": {
                "title": "Property Type Object",
                "description": "A JSON object where each entry is constrained by a property type.",
                "type": "object",
                "propertyNames": {
                  "$schema": "https://json-schema.org/draft/2019-09/schema",
                  "$id": "https://blockprotocol.org/types/modules/graph/0.3/schema/base-url",
                  "title": "Base URL",
                  "description": "The base URL of a Block Protocol ontology type (the $id of the schema, without the versioned suffix). It should a valid URL, with a trailing slash.",
                  "type": "string",
                  "format": "uri",
                  "maxLength": 2048
                },
                "x-patternProperties": {
                  ".*": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/PropertyObjectReference"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["array"]
                          },
                          "items": {
                            "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/PropertyObjectReference"
                          },
                          "minItems": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "maxItems": {
                            "type": "integer",
                            "minimum": 0
                          }
                        },
                        "required": ["type", "items"],
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              },
              "LinkTypeObject": {
                "type": "object",
                "x-propertyNames": {
                  "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/VersionedUrl"
                },
                "x-patternProperties": {
                  ".*": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["array"]
                      },
                      "ordered": {
                        "type": "boolean",
                        "default": false
                      },
                      "items": {
                        "description": "Specifies a set of entity types inside a oneOf",
                        "type": "object",
                        "properties": {
                          "oneOf": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/EntityTypeWithMetadata/properties/schema/definitions/EntityTypeReference"
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "minItems": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "maxItems": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": ["type", "ordered", "items"],
                    "additionalProperties": false
                  }
                }
              }
            }
          }
        }
      },
      "EntityUuid": {
        "type": "string",
        "format": "uuid"
      },
      "EntityVertexId": {
        "type": "object",
        "required": ["baseId", "revisionId"],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "revisionId": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "Filter": {
        "oneOf": [
          {
            "type": "object",
            "title": "AllFilter",
            "required": ["all"],
            "properties": {
              "all": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "AnyFilter",
            "required": ["any"],
            "properties": {
              "any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "NotFilter",
            "required": ["not"],
            "properties": {
              "not": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "type": "object",
            "title": "EqualFilter",
            "required": ["equal"],
            "properties": {
              "equal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "NotEqualFilter",
            "required": ["notEqual"],
            "properties": {
              "notEqual": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "StartsWithFilter",
            "required": ["startsWith"],
            "properties": {
              "startsWith": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "EndsWithFilter",
            "required": ["endsWith"],
            "properties": {
              "endsWith": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "ContainsSegmentFilter",
            "required": ["containsSegment"],
            "properties": {
              "containsSegment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        ]
      },
      "FilterExpression": {
        "oneOf": [
          {
            "type": "object",
            "title": "PathExpression",
            "required": ["path"],
            "properties": {
              "path": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/PropertyTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/EntityTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/EntityQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/Selector"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "title": "ParameterExpression",
            "required": ["parameter"],
            "properties": {
              "parameter": {}
            }
          }
        ]
      },
      "GraphElementVertexId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/PropertyTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityVertexId"
          }
        ]
      },
      "GraphResolveDepths": {
        "type": "object",
        "description": "TODO: DOC - <https://app.asana.com/0/0/1203438518991188/f>",
        "required": [
          "inheritsFrom",
          "constrainsValuesOn",
          "constrainsPropertiesOn",
          "constrainsLinksOn",
          "constrainsLinkDestinationsOn",
          "isOfType",
          "hasLeftEntity",
          "hasRightEntity"
        ],
        "properties": {
          "constrainsLinkDestinationsOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsLinksOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsPropertiesOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsValuesOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "hasLeftEntity": {
            "$ref": "#/components/schemas/EdgeResolveDepths"
          },
          "hasRightEntity": {
            "$ref": "#/components/schemas/EdgeResolveDepths"
          },
          "inheritsFrom": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "isOfType": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          }
        }
      },
      "KnowledgeGraphEdgeKind": {
        "type": "string",
        "enum": ["HAS_LEFT_ENTITY", "HAS_RIGHT_ENTITY"]
      },
      "KnowledgeGraphOutwardEdge": {
        "oneOf": [
          {
            "type": "object",
            "title": "KnowledgeGraphToKnowledgeGraphOutwardEdge",
            "required": ["kind", "reversed", "rightEndpoint"],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/KnowledgeGraphEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/EntityIdWithInterval"
              }
            }
          },
          {
            "type": "object",
            "title": "KnowledgeGraphToOntologyOutwardEdge",
            "required": ["kind", "reversed", "rightEndpoint"],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/SharedEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/OntologyTypeVertexId"
              }
            }
          }
        ]
      },
      "KnowledgeGraphVertex": {
        "oneOf": [
          {
            "type": "object",
            "title": "EntityVertex",
            "required": ["kind", "inner"],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/Entity"
              },
              "kind": {
                "type": "string",
                "enum": ["entity"]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "KnowledgeGraphVertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/KnowledgeGraphVertex"
          }
        }
      },
      "LeftClosedTemporalInterval": {
        "type": "object",
        "required": ["start", "end"],
        "properties": {
          "end": {
            "$ref": "#/components/schemas/OpenTemporalBound"
          },
          "start": {
            "$ref": "#/components/schemas/ClosedTemporalBound"
          }
        }
      },
      "LimitedTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": ["kind", "limit"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["inclusive"]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": ["kind", "limit"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["exclusive"]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "LinkData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityLinkOrder"
          },
          {
            "type": "object",
            "required": ["leftEntityId", "rightEntityId"],
            "properties": {
              "leftEntityId": {
                "$ref": "#/components/schemas/EntityId"
              },
              "rightEntityId": {
                "$ref": "#/components/schemas/EntityId"
              }
            }
          }
        ],
        "description": "The associated information for 'Link' entities"
      },
      "LinkOrder": {
        "type": "integer",
        "format": "int32"
      },
      "LoadExternalDataTypeRequest": {
        "type": "object",
        "required": ["dataTypeId", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "dataTypeId": {
            "type": "string"
          }
        }
      },
      "LoadExternalEntityTypeRequest": {
        "type": "object",
        "required": ["entityTypeId", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "entityTypeId": {
            "type": "string"
          }
        }
      },
      "LoadExternalPropertyTypeRequest": {
        "type": "object",
        "required": ["propertyTypeId", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "propertyTypeId": {
            "type": "string"
          }
        }
      },
      "MaybeListOfEntityTypeMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EntityTypeMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeMetadata"
            }
          }
        ]
      },
      "MaybeListOfOntologyElementMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OntologyElementMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OntologyElementMetadata"
            }
          }
        ]
      },
      "NullableTimestamp": {
        "type": "string",
        "format": "date-time",
        "nullable": true
      },
      "OntologyEdgeKind": {
        "type": "string",
        "enum": [
          "INHERITS_FROM",
          "CONSTRAINS_VALUES_ON",
          "CONSTRAINS_PROPERTIES_ON",
          "CONSTRAINS_LINKS_ON",
          "CONSTRAINS_LINK_DESTINATIONS_ON"
        ]
      },
      "OntologyElementMetadata": {
        "type": "object",
        "required": ["recordId", "custom"],
        "properties": {
          "custom": {
            "$ref": "#/components/schemas/CustomOntologyMetadata"
          },
          "recordId": {
            "$ref": "#/components/schemas/OntologyTypeRecordId"
          }
        }
      },
      "OntologyOutwardEdge": {
        "oneOf": [
          {
            "type": "object",
            "title": "OntologyToOntologyOutwardEdge",
            "required": ["kind", "reversed", "rightEndpoint"],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/OntologyEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/OntologyTypeVertexId"
              }
            }
          },
          {
            "type": "object",
            "title": "OntologyToKnowledgeGraphOutwardEdge",
            "required": ["kind", "reversed", "rightEndpoint"],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/SharedEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/EntityIdWithInterval"
              }
            }
          }
        ]
      },
      "OntologyTemporalMetadata": {
        "type": "object",
        "required": ["transactionTime"],
        "properties": {
          "transactionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "OntologyTypeRecordId": {
        "type": "object",
        "required": ["baseUrl", "version"],
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "OntologyTypeVersion": {
        "type": "integer",
        "format": "int32",
        "minimum": 0
      },
      "OntologyTypeVertexId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/PropertyTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityTypeVertexId"
          }
        ]
      },
      "OntologyVertex": {
        "oneOf": [
          {
            "type": "object",
            "title": "DataTypeVertex",
            "required": ["kind", "inner"],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/DataTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": ["dataType"]
              }
            }
          },
          {
            "type": "object",
            "title": "PropertyTypeVertex",
            "required": ["kind", "inner"],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/PropertyTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": ["propertyType"]
              }
            }
          },
          {
            "type": "object",
            "title": "EntityTypeVertex",
            "required": ["kind", "inner"],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/EntityTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": ["entityType"]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "OntologyVertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/OntologyVertex"
          }
        }
      },
      "OpenTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": ["kind", "limit"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["exclusive"]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "UnboundedBound",
            "required": ["kind"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["unbounded"]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "OutgoingEdgeResolveDepth": {
        "type": "object",
        "required": ["outgoing"],
        "properties": {
          "outgoing": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "OwnedById": {
        "type": "string",
        "format": "uuid"
      },
      "PropertyTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`DataTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "recordCreatedById",
          "recordArchivedById",
          "title",
          "description",
          "dataTypes",
          "propertyTypes"
        ]
      },
      "PropertyTypeStructuralQuery": {
        "type": "object",
        "required": ["filter", "graphResolveDepths", "temporalAxes"],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "PropertyTypeVertexId": {
        "type": "object",
        "required": ["baseId", "revisionId"],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "PropertyTypeWithMetadata": {
        "type": "object",
        "required": ["schema", "metadata"],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/OntologyElementMetadata"
          },
          "schema": {
            "title": "Property Type",
            "description": "Specifies the structure of a Block Protocol property type",
            "type": "object",
            "properties": {
              "$schema": {
                "type": "string",
                "enum": [
                  "https://blockprotocol.org/types/modules/graph/0.3/schema/property-type"
                ]
              },
              "kind": {
                "type": "string",
                "enum": ["propertyType"]
              },
              "$id": {
                "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/VersionedUrl"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "oneOf": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/PropertyValues"
                }
              }
            },
            "required": ["$schema", "kind", "$id", "title", "oneOf"],
            "additionalProperties": false,
            "definitions": {
              "PropertyValues": {
                "title": "propertyValues",
                "description": "The definition of potential property values, either references to data types, objects made up of more property types, or an array where the items are defined from a set of other property values definitions.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/DataTypeReference"
                  },
                  {
                    "title": "propertyObjectValue",
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["object"]
                      },
                      "properties": {
                        "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/PropertyTypeObject"
                      }
                    },
                    "minProperties": 1,
                    "required": ["type", "properties"]
                  },
                  {
                    "title": "propertyArrayValue",
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["array"]
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "oneOf": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/PropertyValues"
                            },
                            "minItems": 1
                          }
                        },
                        "required": ["oneOf"],
                        "additionalProperties": false
                      },
                      "minItems": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "maxItems": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": ["type", "items"],
                    "additionalProperties": false
                  }
                ]
              },
              "PropertyTypeObject": {
                "title": "Property Type Object",
                "description": "A JSON object where each entry is constrained by a property type.",
                "type": "object",
                "propertyNames": {
                  "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/BaseUrl"
                },
                "x-patternProperties": {
                  ".*": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/PropertyTypeReference"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["array"]
                          },
                          "items": {
                            "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/PropertyTypeReference"
                          },
                          "minItems": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "maxItems": {
                            "type": "integer",
                            "minimum": 0
                          }
                        },
                        "required": ["type", "items"],
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              },
              "VersionedUrl": {
                "title": "Versioned URL",
                "description": "The versioned URL of a Block Protocol ontology type (the $id of the schema). It should be of the form `${baseUrl}v/${versionNumber}`",
                "type": "string",
                "format": "uri",
                "maxLength": 2048
              },
              "BaseUrl": {
                "title": "Base URL",
                "description": "The base URL of a Block Protocol ontology type (the $id of the schema, without the versioned suffix). It should a valid URL, with a trailing slash.",
                "type": "string",
                "format": "uri",
                "maxLength": 2048
              },
              "PropertyTypeReference": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/BaseUrl"
                  }
                },
                "required": ["$ref"],
                "additionalProperties": false
              },
              "DataTypeReference": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "$ref": "#/components/schemas/PropertyTypeWithMetadata/properties/schema/definitions/VersionedUrl"
                  }
                },
                "required": ["$ref"],
                "additionalProperties": false
              }
            }
          }
        }
      },
      "ProvenanceMetadata": {
        "type": "object",
        "required": ["recordCreatedById"],
        "properties": {
          "recordArchivedById": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecordArchivedById"
              }
            ],
            "nullable": true
          },
          "recordCreatedById": {
            "$ref": "#/components/schemas/RecordCreatedById"
          }
        }
      },
      "QueryTemporalAxes": {
        "oneOf": [
          {
            "type": "object",
            "title": "QueryTemporalAxesDecisionTime",
            "required": ["pinned", "variable"],
            "properties": {
              "pinned": {
                "type": "object",
                "required": ["axis", "timestamp"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "variable": {
                "type": "object",
                "required": ["axis", "interval"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/RightBoundedTemporalInterval"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "title": "QueryTemporalAxesTransactionTime",
            "required": ["pinned", "variable"],
            "properties": {
              "pinned": {
                "type": "object",
                "required": ["axis", "timestamp"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "variable": {
                "type": "object",
                "required": ["axis", "interval"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/RightBoundedTemporalInterval"
                  }
                }
              }
            }
          }
        ],
        "description": "Defines the two possible combinations of pinned/variable temporal axes that are used in\nresponses to queries that return [`Subgraph`]s.\n\nWhen querying the Graph, temporal data is returned. The Graph is implemented as a bitemporal\ndata store, which means the knowledge data contains information about the time of when the\nknowledge was inserted into the Graph, the [`TransactionTime`], and when the knowledge was\ndecided to be inserted, the [`DecisionTime`].\n\nIn order to query data from the Graph, only one of the two time axes can be used. This is\nachieved by using a `TemporalAxes`. The `TemporalAxes` pins one axis to a specified\n[`Timestamp`], while the other axis can be a [`Interval`]. The pinned axis is called the\n[`PinnedTemporalAxis`] and the other axis is called the [`VariableTemporalAxis`]. The returned\ndata will then only contain temporal data that is contained in the [`Interval`] of the\n[`VariableTemporalAxis`] for the given [`Timestamp`] of the [`PinnedTemporalAxis`].\n\n[`Subgraph`]: crate::subgraph::Subgraph\n[`Interval`]: crate::interval::Interval"
      },
      "QueryTemporalAxesUnresolved": {
        "oneOf": [
          {
            "type": "object",
            "title": "QueryTemporalAxesUnresolvedDecisionTime",
            "required": ["pinned", "variable"],
            "properties": {
              "pinned": {
                "type": "object",
                "required": ["axis", "timestamp"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/NullableTimestamp"
                  }
                }
              },
              "variable": {
                "type": "object",
                "required": ["axis", "interval"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/UnresolvedRightBoundedTemporalInterval"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "title": "QueryTemporalAxesUnresolvedTransactionTime",
            "required": ["pinned", "variable"],
            "properties": {
              "pinned": {
                "type": "object",
                "required": ["axis", "timestamp"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/NullableTimestamp"
                  }
                }
              },
              "variable": {
                "type": "object",
                "required": ["axis", "interval"],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/UnresolvedRightBoundedTemporalInterval"
                  }
                }
              }
            }
          }
        ],
        "description": "Defines the two possible combinations of pinned/variable temporal axes that are used in queries\nthat return [`Subgraph`]s.\n\nThe [`VariableTemporalAxisUnresolved`] is optionally bounded, in the absence of provided\nbounds an inclusive bound at the timestamp at point of resolving is assumed.\n\n[`Subgraph`]: crate::subgraph::Subgraph"
      },
      "RecordArchivedById": {
        "type": "string",
        "format": "uuid"
      },
      "RecordCreatedById": {
        "type": "string",
        "format": "uuid"
      },
      "RightBoundedTemporalInterval": {
        "type": "object",
        "required": ["start", "end"],
        "properties": {
          "end": {
            "$ref": "#/components/schemas/LimitedTemporalBound"
          },
          "start": {
            "$ref": "#/components/schemas/TemporalBound"
          }
        }
      },
      "Selector": {
        "type": "string",
        "enum": ["*"]
      },
      "SharedEdgeKind": {
        "type": "string",
        "enum": ["IS_OF_TYPE"]
      },
      "Subgraph": {
        "type": "object",
        "required": ["roots", "vertices", "edges", "depths", "temporalAxes"],
        "properties": {
          "depths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "edges": {
            "$ref": "#/components/schemas/Edges"
          },
          "roots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GraphElementVertexId"
            }
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/SubgraphTemporalAxes"
          },
          "vertices": {
            "$ref": "#/components/schemas/Vertices"
          }
        }
      },
      "SubgraphTemporalAxes": {
        "type": "object",
        "required": ["initial", "resolved"],
        "properties": {
          "initial": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          },
          "resolved": {
            "$ref": "#/components/schemas/QueryTemporalAxes"
          }
        }
      },
      "TemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "UnboundedBound",
            "required": ["kind"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["unbounded"]
              }
            }
          },
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": ["kind", "limit"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["inclusive"]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": ["kind", "limit"],
            "properties": {
              "kind": {
                "type": "string",
                "enum": ["exclusive"]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "TransactionTime": {
        "type": "string",
        "description": "Time axis for the transaction time.\n\nThis is used as the generic argument to time-related structs and can be used as tag value.",
        "enum": ["transactionTime"]
      },
      "UnarchiveDataTypeRequest": {
        "type": "object",
        "required": ["typeToUnarchive", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "typeToUnarchive": {
            "type": "string"
          }
        }
      },
      "UnarchiveEntityTypeRequest": {
        "type": "object",
        "required": ["typeToUnarchive", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "typeToUnarchive": {
            "type": "string"
          }
        }
      },
      "UnarchivePropertyTypeRequest": {
        "type": "object",
        "required": ["typeToUnarchive", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "typeToUnarchive": {
            "type": "string"
          }
        }
      },
      "UnresolvedRightBoundedTemporalInterval": {
        "type": "object",
        "required": ["start", "end"],
        "properties": {
          "end": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LimitedTemporalBound"
              }
            ],
            "nullable": true
          },
          "start": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TemporalBound"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpdateDataTypeRequest": {
        "type": "object",
        "required": ["schema", "typeToUpdate", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "schema": {
            "description": "The contents of a Data Type update request",
            "type": "object",
            "properties": {
              "$schema": {
                "type": "string",
                "enum": [
                  "https://blockprotocol.org/types/modules/graph/0.3/schema/data-type"
                ]
              },
              "kind": {
                "enum": ["dataType"]
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": ["$schema", "kind", "title", "type"],
            "additionalProperties": true
          },
          "typeToUpdate": {
            "type": "string"
          }
        }
      },
      "UpdateEntityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityLinkOrder"
          },
          {
            "type": "object",
            "required": [
              "properties",
              "entityId",
              "entityTypeId",
              "actorId",
              "archived"
            ],
            "properties": {
              "actorId": {
                "$ref": "#/components/schemas/RecordCreatedById"
              },
              "archived": {
                "type": "boolean"
              },
              "entityId": {
                "$ref": "#/components/schemas/EntityId"
              },
              "entityTypeId": {
                "type": "string"
              },
              "properties": {
                "$ref": "#/components/schemas/EntityProperties"
              }
            }
          }
        ]
      },
      "UpdateEntityTypeRequest": {
        "type": "object",
        "required": ["schema", "typeToUpdate", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "labelProperty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUrl"
              }
            ],
            "nullable": true
          },
          "schema": {
            "description": "The contents of an Entity Type update request",
            "type": "object",
            "properties": {
              "$schema": {
                "type": "string",
                "enum": [
                  "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-type"
                ]
              },
              "kind": {
                "enum": ["entityType"]
              },
              "type": {
                "enum": ["object"]
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "examples": {
                "$comment": "Example Entity instances",
                "type": "array",
                "items": {
                  "type": "object",
                  "propertyNames": {
                    "$comment": "Property names must be a valid URL to a Property Type",
                    "type": "string",
                    "format": "uri"
                  }
                }
              },
              "properties": {
                "$ref": "#/components/schemas/UpdateEntityTypeRequest/properties/schema/definitions/PropertyTypeObject"
              },
              "required": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "links": {
                "$ref": "#/components/schemas/UpdateEntityTypeRequest/properties/schema/definitions/LinkTypeObject"
              }
            },
            "additionalProperties": false,
            "required": ["$schema", "kind", "type", "title", "properties"],
            "definitions": {
              "PropertyTypeObject": {
                "type": "object",
                "propertyNames": {
                  "$comment": "Property names must be a valid URL to a Property Type",
                  "type": "string",
                  "format": "uri"
                },
                "patternProperties": {
                  ".*": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/UpdateEntityTypeRequest/properties/schema/definitions/PropertyTypeReference"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "enum": ["array"]
                          },
                          "items": {
                            "$ref": "#/components/schemas/UpdateEntityTypeRequest/properties/schema/definitions/PropertyTypeReference"
                          },
                          "minItems": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "maxItems": {
                            "type": "integer",
                            "minimum": 0
                          }
                        },
                        "required": ["type", "items"],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "minimumProperties": 1
              },
              "PropertyTypeReference": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "$comment": "Property Object values must be defined through references to the same valid URL to a Property Type",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["$ref"],
                "additionalProperties": false
              },
              "LinkTypeObject": {
                "type": "object",
                "propertyNames": {
                  "$comment": "Property names must be a valid URL to a Property Type",
                  "type": "string",
                  "format": "uri"
                },
                "patternProperties": {
                  ".*": {
                    "type": "object",
                    "properties": {
                      "oneOf": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/UpdateEntityTypeRequest/properties/schema/definitions/EntityTypeReference"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "enum": ["array"]
                                },
                                "items": {
                                  "$ref": "#/components/schemas/UpdateEntityTypeRequest/properties/schema/definitions/EntityTypeReference"
                                },
                                "ordered": {
                                  "type": "boolean",
                                  "default": false
                                },
                                "minItems": {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                "maxItems": {
                                  "type": "integer",
                                  "minimum": 0
                                }
                              },
                              "required": ["type", "ordered"],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "minItems": 1
                      }
                    }
                  }
                }
              },
              "EntityTypeReference": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["$ref"],
                "additionalProperties": false
              }
            }
          },
          "typeToUpdate": {
            "type": "string"
          }
        }
      },
      "UpdatePropertyTypeRequest": {
        "type": "object",
        "required": ["schema", "typeToUpdate", "actorId"],
        "properties": {
          "actorId": {
            "$ref": "#/components/schemas/RecordCreatedById"
          },
          "schema": {
            "description": "The contents of a Property Type update request",
            "type": "object",
            "properties": {
              "$schema": {
                "type": "string",
                "enum": [
                  "https://blockprotocol.org/types/modules/graph/0.3/schema/property-type"
                ]
              },
              "kind": {
                "enum": ["propertyType"]
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "oneOf": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdatePropertyTypeRequest/properties/schema/definitions/PropertyValuesUpdate"
                }
              }
            },
            "required": ["$schema", "kind", "title", "oneOf"],
            "additionalProperties": false,
            "definitions": {
              "PropertyValuesUpdate": {
                "$id": "PropertyValuesUpdate",
                "title": "PropertyValuesUpdate",
                "$comment": "The definition of potential property values, made up of a `oneOf` keyword which has a list of options of either references to Data Types, or objects made up of more Property Types",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePropertyTypeRequest/properties/schema/definitions/DataTypeReferenceUpdate"
                  },
                  {
                    "title": "propertyObjectValue",
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": ["object"]
                      },
                      "properties": {
                        "$ref": "#/components/schemas/UpdatePropertyTypeRequest/properties/schema/definitions/PropertyTypeObject"
                      }
                    },
                    "required": ["type", "properties"],
                    "additionalProperties": false
                  },
                  {
                    "title": "propertyArrayValueUpdate",
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": ["array"]
                      },
                      "items": {
                        "type": "object",
                        "properties": {
                          "oneOf": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/UpdatePropertyTypeRequest/properties/schema/definitions/PropertyValuesUpdate"
                            },
                            "minItems": 1
                          }
                        },
                        "required": ["oneOf"],
                        "additionalProperties": false
                      },
                      "minItems": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "maxItems": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": ["type", "items"],
                    "additionalProperties": false
                  }
                ]
              },
              "PropertyTypeObject": {
                "$id": "PropertyTypeObject",
                "title": "PropertyTypeObject",
                "type": "object",
                "propertyNames": {
                  "$comment": "Property names must be a valid URL to a Property Type",
                  "type": "string",
                  "format": "uri"
                },
                "patternProperties": {
                  ".*": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/UpdatePropertyTypeRequest/properties/schema/definitions/PropertyTypeReferenceUpdate"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "enum": ["array"]
                          },
                          "items": {
                            "$ref": "#/components/schemas/UpdatePropertyTypeRequest/properties/schema/definitions/PropertyTypeReferenceUpdate"
                          },
                          "minItems": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "maxItems": {
                            "type": "integer",
                            "minimum": 0
                          }
                        },
                        "required": ["type", "items"],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "minimumProperties": 1
              },
              "PropertyTypeReferenceUpdate": {
                "type": "object",
                "properties": {
                  "$ref": {
                    "$comment": "Property Object values must be defined through references to the same valid URL to a Property Type",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "additionalProperties": false,
                "required": ["$ref"]
              },
              "DataTypeReferenceUpdate": {
                "title": "DataTypeReferenceUpdate",
                "type": "object",
                "properties": {
                  "$ref": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "additionalProperties": false,
                "required": ["$ref"]
              }
            }
          },
          "typeToUpdate": {
            "type": "string"
          }
        }
      },
      "Vertex": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OntologyVertex"
          },
          {
            "$ref": "#/components/schemas/KnowledgeGraphVertex"
          }
        ]
      },
      "Vertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/KnowledgeGraphVertex"
              },
              {
                "$ref": "#/components/schemas/OntologyVertex"
              }
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Graph",
      "description": "HASH Graph API"
    },
    {
      "name": "Account",
      "description": "Account management API"
    },
    {
      "name": "DataType",
      "description": "Data Type management API"
    },
    {
      "name": "PropertyType",
      "description": "Property type management API"
    },
    {
      "name": "EntityType",
      "description": "Entity type management API"
    },
    {
      "name": "Entity",
      "description": "entity management API"
    }
  ]
}
